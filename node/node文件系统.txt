参考web
https://www.runoob.com/nodejs/nodejs-fs.html


#reada.js
fs.readFile('input.txt', function (err, data) {  //dos命令窗同一目录下的input.txt
   if (err) {
       return console.error(err);
   }
   console.log("异步读取: " + data.toString());
});

// 同步读取
var data = fs.readFileSync('input.txt');
console.log("同步读取: " + data.toString());
console.log("程序执行完毕。");



=======================================================异步打开文件
#基本格式:fs.open(path, flags[, mode], callback)
--------------------------------
var fs = require("fs");
// 异步打开文件
console.log("准备打开文件！");
fs.open('input.txt', 'r+', function(err, fd) {
   if (err) {
       return console.error(err);
   }
  console.log("文件打开成功！");     
});
--------------------------------
r	以读取模式打开文件。如果文件不存在抛出异常。
r+	以读写模式打开文件。如果文件不存在抛出异常。
rs	以同步的方式读取文件。
rs+	以同步的方式读取和写入文件。
w	以写入模式打开文件，如果文件不存在则创建。
wx	类似 'w'，但是如果文件路径存在，则文件写入失败。
w+	以读写模式打开文件，如果文件不存在则创建。
wx+	类似 'w+'， 但是如果文件路径存在，则文件读写失败。
a	以追加模式打开文件，如果文件不存在则创建。
ax	类似 'a'， 但是如果文件路径存在，则文件追加失败。
a+	以读取追加模式打开文件，如果文件不存在则创建。
ax+	类似 'a+'， 但是如果文件路径存在，则文件读取追加失败。


======================================================异步获取文件信息
基本格式:fs.stat(path, callback)
---------------------------------------
var fs = require("fs");

console.log("准备打开文件！");
fs.stat('input.txt', function (err, stats) {
   if (err) {
       return console.error(err);
   }
   console.log(stats);
   console.log("读取文件信息成功！");
   
   // 检测文件类型
   console.log("是否为文件(isFile) ? " + stats.isFile());
   console.log("是否为目录(isDirectory) ? " + stats.isDirectory());    
});
----------------------------------------------
stats.isFile()	如果是文件返回 true，否则返回 false。
stats.isDirectory()	如果是目录返回 true，否则返回 false。
stats.isBlockDevice()	如果是块设备返回 true，否则返回 false。
stats.isCharacterDevice()	如果是字符设备返回 true，否则返回 false。
stats.isSymbolicLink()	如果是软链接返回 true，否则返回 false。
stats.isFIFO()	如果是FIFO，返回true，否则返回 false。FIFO是UNIX中的一种特殊类型的命令管道。
stats.isSocket()	如果是 Socket 返回 true，否则返回 false。



======================================================异步写入文件
基本格式:fs.writeFile(file, data[, options], callback)
参数使用说明如下：
file - 文件名或文件描述符。
data - 要写入文件的数据，可以是 String(字符串) 或 Buffer(缓冲) 对象。
options - 该参数是一个对象，包含 {encoding, mode, flag}。默认编码为 utf8, 模式为 0666 ， flag 为 'w'
callback - 回调函数，回调函数只包含错误信息参数(err)，在写入失败时返回。
-------------------------------
var fs = require("fs");
fs.writeFile('input.txt', '输入内容',  function(err) {
   if (err) {
       return console.error(err);
   }
});



======================================================异步读取文件
基本格式:fs.read(fd, buffer, offset, length, position, callback)
参数使用说明如下：

fd - 通过 fs.open() 方法返回的文件描述符。
buffer - 数据写入的缓冲区。
offset - 缓冲区写入的写入偏移量。
length - 要从文件中读取的字节数。
position - 文件读取的起始位置，如果 position 的值为 null，则会从当前文件指针的位置读取。
callback - 回调函数，有三个参数err, bytesRead, buffer，err 为错误信息， bytesRead 表示读取的字节数，buffer 为缓冲区对象。
-----------------------------------------
var fs = require("fs");
var buf = new Buffer.alloc(1024);
fs.open('input.txt', 'r+', function(err, fd) {
   if (err) {
       return console.error(err);
   }
   fs.read(fd, buf, 0, buf.length, 0, function(err, bytes){
      if (err){
         console.log(err);
      }
      console.log(bytes + "  字节被读取");
      if(bytes > 0){
         console.log(buf.slice(0, bytes).toString());
      }
   });
});



======================================================关闭文件
fs.close(fd, callback)
参数使用说明如下：
fd - 通过 fs.open() 方法返回的文件描述符。
callback - 回调函数，没有参数。
------------------------------------------
 fs.close(fd, function(err){
 if (err){
	console.log(err);
 }
});
======================================================截取文件
fs.ftruncate(fd, len, callback)
fd - 通过 fs.open() 方法返回的文件描述符。
len - 文件内容截取的长度。
callback - 回调函数，没有参数。
--------------------------------------
#先打开,在截取,再关闭

fs.ftruncate(fd, 10, function(err){
  if (err){
	 console.log(err);
  };
});


======================================================删除文件
fs.unlink(path, callback)
path - 文件路径。
callback - 回调函数，没有参数。
------------------------
var fs = require("fs");
fs.unlink('input.txt', function(err) {
   if (err) {
       return console.error(err);
   }
});

======================================================删除文件
fs.mkdir(path[, options], callback)
path - 文件路径。
options 参数可以是：
      recursive - 是否以递归的方式创建目录，默认为 false。
      mode - 设置目录权限，默认为 0777。
callback - 回调函数，没有参数。




