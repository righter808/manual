参考文档:
https://docs.cocos.com/creator/manual/zh/physics/collision/collision-manager.html
https://blog.csdn.net/agsgh/article/details/79723394


1,编辑节点  
2,添加碰撞组件和脚本 
3,开启碰撞检测 
4,编写碰撞后执行的函数



=========================================1,编辑组件,添加分组和添加碰撞组件
选中需要添加碰撞的节点,譬如 人物A
属性面板,编辑分组,添加wall  或者 hero分组
在允许产生碰撞的分组配对,hero 和wall   交叉的位置打钩

#添加分组
将对应分组改成hero


#添加碰撞组件
教程添加的是
物理组件-colider-box

=========================================3,开启碰撞检测 
 onLoad() {
        cc.director.getCollisionManager().enabled=true;
     //   cc.director.getCollisionManager().enabledDrawBoundingBox = true;
     //开启绘制区域
       cc.director.getCollisionManager().enabledDebugDraw = true;
        cc.log(this.score);
    },


=========================================4,编写碰撞后执行的函数
 onCollisionEnter:function(other,self){              //碰撞则播放爆炸动画
        if (other.node.group != 'bullet'){
            cc.log("bullet");
            return ;
        }
        if(other.node.group == 'bullet') //检测碰撞组
        {   
            other.node.removeFromParent();
            this.hp -= 1;
            if(this.hp == 0 )
            {
              //  enemyReq.add_Score();
                 this.node.group = 'default'; //防止播放爆炸动画时继续检测导致神奇的事情发生
                 var en = this.node.getComponent(cc.Animation);
                 var na = this.node.name;
                en.play(na+"_des"); //播放动画
                 en.on('finished',function(e){
                        this.node.removeFromParent();
                       // var score = this.node.getComponent(cc.Label);   
                 },this); 
            }
        }
    },


============================================================================






/**
 * 当碰撞产生的时候调用
 * @param  {Collider} other 产生碰撞的另一个碰撞组件
 * @param  {Collider} self  产生碰撞的自身的碰撞组件
 */
onCollisionEnter: function (other, self) {
    console.log('on collision enter');

    // 碰撞系统会计算出碰撞组件在世界坐标系下的相关的值，并放到 world 这个属性里面
    var world = self.world;

    // 碰撞组件的 aabb 碰撞框
    var aabb = world.aabb;

    // 节点碰撞前上一帧 aabb 碰撞框的位置
    var preAabb = world.preAabb;

    // 碰撞框的世界矩阵
    var t = world.transform;

    // 以下属性为圆形碰撞组件特有属性
    var r = world.radius;
    var p = world.position;

    // 以下属性为 矩形 和 多边形 碰撞组件特有属性
    var ps = world.points;
},

/**
 * 当碰撞产生后，碰撞结束前的情况下，每次计算碰撞结果后调用
 * @param  {Collider} other 产生碰撞的另一个碰撞组件
 * @param  {Collider} self  产生碰撞的自身的碰撞组件
 */
onCollisionStay: function (other, self) {
    console.log('on collision stay');
},

/**
 * 当碰撞结束后调用
 * @param  {Collider} other 产生碰撞的另一个碰撞组件
 * @param  {Collider} self  产生碰撞的自身的碰撞组件
 */
onCollisionExit: function (other, self) {
    console.log('on collision exit');
}